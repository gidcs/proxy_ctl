#!/bin/bash
# proxy_ctl used for nginx reverse proxy
# https://github.com/gidcs/proxy_ctl
# proxy_ctl

NGINX_DIR="/etc/nginx"
NGINX_CONF_DIR="${NGINX_DIR}/conf.d"
NGINX_SSL_DIR="${NGINX_DIR}/ssl"
NGINX_LOG_DIR="/var/log/nginx"
ACME_SH_DIR="/root/.acme.sh"
ACME_SH="${ACME_SH_DIR}/acme.sh"

DHPARAM_PEM="${NGINX_SSL_DIR}/dhparam.pem"
NGINX_RELOAD='systemctl force-reload nginx'
HTTP_CONF='server {
    listen HTTP_PORT;
    listen [::]:HTTP_PORT;

    server_name SERVERNAME;

    location / {
        return 301 https://$host:HTTPS_PORT$request_uri;
    }
}'
HTTPS_CONF_BEFORE='server {
    ##listen HTTPS_PORT ssl http2;
    ##listen [::]:HTTPS_PORT ssl http2;

    server_name SERVERNAME;

    access_log  NGINX_LOG_DIR/SERVERNAME.access.log;
    error_log  NGINX_LOG_DIR/SERVERNAME.error.log;

    ##ssl on;
    ##ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ##ssl_protocols TLSv1.2;
    ##ssl_ecdh_curve secp384r1;
    ##ssl_session_cache shared:SSL:10m;
    ##ssl_session_timeout  24h;
    ##ssl_buffer_size 1400;
    ##ssl_session_tickets off;
    ##ssl_prefer_server_ciphers on;

    # certificate and dhparam
    ##ssl_certificate NGINX_SSL_DIR/SERVERNAME.chained.crt;
    ##ssl_certificate_key NGINX_SSL_DIR/SERVERNAME.key;
    ##ssl_dhparam NGINX_SSL_DIR/dhparam.pem;

    # OCSP Stapling
    ##ssl_stapling on;
    ##ssl_stapling_verify on;
    ##resolver 8.8.4.4 8.8.8.8 valid=300s;
    ##resolver_timeout 5s;

    # SPDY
    ##http2_idle_timeout 300;

    # Enable HSTS
    ##add_header Strict-Transport-Security max-age=63072000;

    # Do not allow this site to be displayed in iframes
    #add_header X-Frame-Options DENY;

    # Do not permit Content-Type sniffing.
    ##add_header X-Content-Type-Options nosniff;

    # other
'
HTTPS_CONF_AFTER='
}'

OTHER_CONF='
    location / {
        #limit_except GET POST {
        #    deny all;
        #}

        proxy_pass ADDRESS;
        ###proxy_set_header Host $host;
        proxy_set_header Referer $http_referer;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
'

COCKPIT_CONF='
    location / {
        # Required to proxy the connection to Cockpit
        proxy_pass ADDRESS;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Required for web sockets to function
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Pass ETag header from Cockpit to clients.
        # See: https://github.com/cockpit-project/cockpit/issues/5239
        gzip off;
    }
'

TRANSMISSION_CONF='
    location / {
        proxy_pass ADDRESS/transmission/web/;
        proxy_pass_header X-Transmission-Session-Id;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /rpc {
        proxy_pass ADDRESS/transmission/rpc;
    }
'


function print {
    local statements="$*"
    echo -e "${statements}"
}

function error {
    local statements="$*"
    print "[E] ${statements}"
    exit -1
}

function root_check {
    # Check if user is root
    if [ "$(id -u)" != "0" ]; then
        error "You must be root to run this script, use sudo $0."
    fi

    # to bypass check of acme.sh
    if [ "$SUDO_COMMAND" ]; then
        SUDO_COMMAND="/bin/bash"
    fi
}

function prev_check {
    local pkg=(
        "curl"
        "gawk"
        "nginx"
        "openssl"
    )

    for i in "${pkg[@]}"
    do
        if [ -z "$(command -v "${i}")" ]; then
            error "Please install ${i} before using proxy_ctl."
        fi
    done

    if [ ! -f "${ACME_SH}" ]; then
        echo "Please install acme.sh before using this tool."
        exit 1
    fi

    if [ ! -d "${NGINX_CONF_DIR}" ]; then
        error "The nginx configuration directory does not exist."
    fi
    if [ ! -d "${NGINX_SSL_DIR}" ]; then
        mkdir ${NGINX_SSL_DIR}
    fi
    if [ ! -d "${NGINX_LOG_DIR}" ]; then
        mkdir -p ${NGINX_LOG_DIR}
    fi
    if [ ! -f "${DHPARAM_PEM}" ]; then
        openssl dhparam -out ${DHPARAM_PEM} 2048 || \
            error "Failed to generate ${DHPARAM_PEM}."
        chmod 400 ${DHPARAM_PEM}
    fi
}

function help {
    local input=$1
    local usage_add=(
            "Usage:"
            "proxy_ctl add <domain> <ipaddr:port> [option...]"
            ""
            "Options:"
            "-t, --type TYPE    set proxy type [cockpit, transmission]"
            "-f, --force        do not send hostname"
            "-h, --http PORT    change listening http port [default: 80]"
            "-P, --port PORT    change listening https port [default: 443]"
            "-p, --proto PROTO  change proxy proto [https]"
        )
    local usage_del=(
            "Usage:"
            "proxy_ctl del <domain> [option...]"
            ""
            "Options:"
            "-f, --force        remove ssl also"
        )
    local usage_help=(
            "Usage:"
            "proxy_ctl help <command>"
            ""
            "Commands:"
            "add                show help add"
            "del                show help del"
            "list               show help list"
        )
    local usage_list=(
            "Usage:"
            "proxy_ctl list"
        )
    local usage_all=(
            "Usage:"
            "proxy_ctl help <command>"
            "proxy_ctl list"
            "proxy_ctl add <domain> <ipaddr:port> [option...]"
            "proxy_ctl del <domain> [option...]"
        )

    case "${input}" in
        "add")
            for i in "${usage_add[@]}"
            do
                print "${i}"
            done
            ;;
        "del")
            for i in "${usage_del[@]}"
            do
                print "${i}"
            done
            ;;
        "help")
            for i in "${usage_help[@]}"
            do
                print "${i}"
            done
            ;;
        "list")
            for i in "${usage_list[@]}"
            do
                print "${i}"
            done
            ;;
        *)
            for i in "${usage_all[@]}"
            do
                print "${i}"
            done
            ;;
    esac
    exit 1
}

function valid_domain {
    local input=$1
    local ret=""

    ret=$(echo "${input}" | \
        gawk '/^(([a-zA-Z0-9](-?[a-zA-Z0-9])*)\.)+[a-zA-Z]{2,63}$/')
    if [ "${input}" == "${ret}" ]; then
        echo 0
    elif [ "${input}" == "localhost" ]; then
        echo 0
    else
        echo 1
    fi
}

function valid_ip {
    local input=$1
    local ret=""

    ret=$(echo "${input}" | \
        gawk -F'.' '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/ &&
            $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255')
    if [ "${input}" == "${ret}" ]; then
        echo 0
    else
        echo 1
    fi
}

function valid_port {
    local input=$1
    local ret=""

    ret=$(echo "${input}" | \
        gawk '$0 ~ /^([0-9]{1,5})$/ && $0 >= 1 && $0 <= 65535')
    if [ "${input}" == "${ret}" ]; then
        echo 0
    elif [ "${input}" == "" ]; then
        echo 0
    else
        echo 1
    fi
}

function valid_address {
    local input=$1
    local addr=""
    local port=""

    addr=$(echo "${input}" | gawk -F':' '{ print $1 }')
    port=$(echo "${input}" | gawk -F':' '{ print $2 }')
    if [ "$(valid_ip "${addr}")" == "0" ] && \
        [ "$(valid_port "${port}")" == "0" ]; then
        echo 0
    elif [ "$(valid_domain "${addr}")" == "0" ] && \
        [ "$(valid_port "${port}")" == "0" ]; then
        echo 0
    else
        echo 1
    fi
}

function error_ssl {
    local domain=$1

    rm -f "${NGINX_CONF_DIR}/${domain}.conf"
    rm -f "${NGINX_SSL_DIR}/${domain}".*
    error "Error Found! Procedure Terminated."
}

function install_ssl {
    local domain=$1

    "${ACME_SH}" --issue -d "${domain}" --nginx
    "${ACME_SH}" --install-cert -d "${domain}" \
        --key-file       "${NGINX_SSL_DIR}/${domain}.key"  \
        --fullchain-file "${NGINX_SSL_DIR}/${domain}.chained.crt" \
        --reloadcmd     "${NGINX_RELOAD}" || error_ssl "${domain}"
    chmod 400 "${NGINX_SSL_DIR}/${domain}".*
}

function add_domain {
    local domain=$1
    local address=$2
    local proto="http"
    local force_proxy=""
    local type="other"
    local port="443"
    local http="80"
    local nginx_conf="${NGINX_CONF_DIR}/${domain}.conf"
    local local_conf=""

    shift 2
    while [ $# -gt 0 ];
    do
        case "$1" in
            -t|--type)
                if [ "$2" != "cockpit" ] && [ "$2" != "transmission" ]; then
                    help "add"
                    error "Invalid port number $2"
                fi
                type="$2"
                shift 2
                ;;
            -f|--force)
                force_proxy="true"
                shift 1
                ;;
            -h|--http)
                if [ "$(valid_port "$2")" != "0" ]; then
                    help "add"
                    error "Invalid port number $2"
                fi
                http="$2"
                shift 2
                ;;
            -P|--port)
                if [ "$(valid_port "$2")" != "0" ]; then
                    help "add"
                    error "Invalid port number $2"
                fi
                port="$2"
                shift 2
                ;;
            -p|--proto)
                if [ "$2" != "https" ]; then
                    help "add"
                    error "Invalid proto $2"
                fi
                proto="$2"
                shift 2
                ;;
            -*)
                help
                error "Invalid option: $1"
                ;;
            *)
                break
                ;;
        esac
    done

    if [ -f "${nginx_conf}" ]; then
        error "The file ${nginx_conf} exists."
    else
        myip=$(curl -s https://api.ipify.org)
        domain_ip_v4=$(getent ahostsv4 "${domain}" | \
                gawk '{ print $1 }' | uniq | head -n 1)
        domain_ip_v6=$(getent ahostsv6 "${domain}" | \
                gawk '{ print $1 }' | uniq | head -n 1)
        if [ "${myip}" != "${domain_ip_v4}" ] &&
            [ "${myip}" != "${domain_ip_v6}" ]; then
            error "Please resolve your domain to ${myip}.\n"+
                    "Now: \n"+
                    "    ipv4: ${domain_ip_v4}\n"+
                    "    ipv6: ${domain_ip_v6}\n"
        fi

        # clean up
        echo "" > "${nginx_conf}"

        # write http config
        echo "${HTTP_CONF}" >> "${nginx_conf}"
        sed -i 's/HTTP_PORT/'"${http}"'/g' "${nginx_conf}"
        if [ "${port}" == "443" ]; then
            sed -i 's/:HTTPS_PORT//g' "${nginx_conf}"
        fi

        # write https config
        echo "${HTTPS_CONF_BEFORE}" >> "${nginx_conf}"
        if [ "${type}" == "cockpit" ]; then
            echo "${COCKPIT_CONF}" >> "${nginx_conf}"
        elif [ "${type}" == "transmission" ]; then
            echo "${TRANSMISSION_CONF}" >> "${nginx_conf}"
        else
            echo "${OTHER_CONF}" >> "${nginx_conf}"
        fi
        echo "${HTTPS_CONF_AFTER}" >> "${nginx_conf}"

        # modify others
        sed -i 's/HTTPS_PORT/'"${port}"'/g' "${nginx_conf}"
        sed -i 's/SERVERNAME/'"${domain}"'/g' "${nginx_conf}"
        sed -i 's|ADDRESS|'"${proto}://${address}"'|g' "${nginx_conf}"
        sed -i 's|NGINX_SSL_DIR|'"${NGINX_SSL_DIR}"'|g' "${nginx_conf}"
        sed -i 's|NGINX_LOG_DIR|'"${NGINX_LOG_DIR}"'|g' "${nginx_conf}"
        if [ "${force_proxy}" == "" ]; then
            sed -i 's/###//g' "${nginx_conf}"
        else
            sed -i '/###/d' "${nginx_conf}"
        fi

        # reload and install ssl
        ${NGINX_RELOAD} &>/dev/null
        install_ssl "${domain}"
        sed -i 's/##//g' "${nginx_conf}"
        ${NGINX_RELOAD} &>/dev/null
        print "${domain} is ready now."
    fi
}

function uninstall_ssl {
    local domain=$1

    "${ACME_SH}" --remove -d "${domain}"
    rm -rf "${ACME_SH_DIR:?}/${domain}"
}

function del_domain {
    local domain=$1
    local force=""

    shift 1
    while [ $# -gt 0 ];
    do
        case "$1" in
            -f|--force)
                force="true"
                shift 1
                ;;
            -*)
                help
                error "Invalid option: $1"
                ;;
            *)
                break
                ;;
        esac
    done
    if [ -f "${NGINX_CONF_DIR}/${domain}.conf"  ]; then
        if [ "${force}" != "" ]; then
            uninstall_ssl "${domain}"
        fi
        rm -f "${NGINX_CONF_DIR}/${domain}.conf"
        rm -f "${NGINX_SSL_DIR}/${domain}".*
        ${NGINX_RELOAD} &>/dev/null
        print "${domain} is deleted."
    else
        error "The file ${NGINX_CONF_DIR}/${domain}.conf does not exist."
    fi
}

function file_exists_wildcard {
    local input=$1

    ls "${input}" > /dev/null 2>&1
    echo "$?"
}

function get_proxy_addr {
    local file=$1

    gawk '/location/ {
        if ($0 !~ /^[[:space:]]*#/ && $1 == "location"){
            location=$2
            #print($2)
        }
    } /proxy_pass/ {
        if(location == "/"){
            if ($0 !~ /^[[:space:]]*#/ && $1 == "proxy_pass"){
                print substr($2, 0, length($2)-1)
            }
        }
    }' "${file}"
}

function get_listen_port {
    local file=$1

    gawk '/listen [0-9]* ssl.*/ {
        if ($0 !~ /^[[:space:]]*#/){
            print $2
        }
    }' "${file}"
}

function list {
    local proxy_address=""
    local port=""

    printf "%-30s %5s %35s\n" "Domain Name" "Port" "Proxy Address"
    printf "%0.1s" "="{1..72}
    printf "\n"
    if [ "$(file_exists_wildcard ${NGINX_CONF_DIR}/*.conf)" == "0" ]; then
        for f in "${NGINX_CONF_DIR}"/*.conf
        do
            proxy_address="$(get_proxy_addr "$f")"
            port="$(get_listen_port "$f")"
            domain=$(echo "$f" | gawk -F'/' '{print substr($NF, 0, length($NF)-5)}')
            if [ "${proxy_address}" != "" ] && [ "${port}" != "" ]; then
                printf "%-30s %5d %35s\n" "${domain}" "${port}" "${proxy_address}"
            fi
        done
    fi
}

root_check
prev_check

case $1 in
    "list")
        list
        ;;
    "add")
        if [ $# -lt 3 ] || [ "$(valid_domain "$2")" == "1" ] || \
            [ "$(valid_address "$3")" == "1" ]; then
            help "add"
        fi
        shift 1
        add_domain "$@"
        ;;
    "del")
        if [ $# -lt 2 ] || [ "$(valid_domain "$2")" == "1" ]; then
            help "del"
        fi
        shift 1
        del_domain "$@"
        ;;
    "help")
        shift 1
        help "$@"
        ;;
    *)
        help
        ;;
esac
