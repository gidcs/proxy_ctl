#!/bin/bash
# proxy_ctl used for nginx reverse proxy
# https://github.com/gidcs/proxy_ctl
# proxy_ctl

NGINX_DIR="/etc/nginx"
NGINX_DIR_DOCKER="/var/lib/nginx"
NGINX_CONF_DIR="${NGINX_DIR}/conf.d"
NGINX_SSL_DIR="${NGINX_DIR}/ssl"
NGINX_LOG_DIR="/var/www/logs"
ACME_SH_DIR="/root/.acme.sh"
ACME_SH="${ACME_SH_DIR}/acme.sh"
DHPARAM_PEM="${NGINX_SSL_DIR}/dhparam.pem"
NGINX_RELOAD='service nginx force-reload'

if [ ! -d ${NGINX_DIR} ]; then
    echo "Please install nginx before using proxy_ctl."
    exit 1
fi

# special case when use inside docker
# let them in same directory which could be bound from host volume
if [ -d ${NGINX_DIR_DOCKER} ]; then
    NGINX_CONF_DIR="${NGINX_DIR_DOCKER}/vhost"
    NGINX_SSL_DIR="${NGINX_DIR_DOCKER}/ssl"
    NGINX_LOG_DIR="${NGINX_DIR_DOCKER}/log"
    DHPARAM_PEM="${NGINX_SSL_DIR}/dhparam.pem"
    NGINX_RELOAD='nginx -s reload'
fi

if [ ! -d ${NGINX_CONF_DIR} ]; then
    echo "The nginx configuration directory does not exist."
    exit 1
fi
if [ ! -d ${NGINX_SSL_DIR} ]; then
    mkdir ${NGINX_SSL_DIR}
fi
if [ ! -d ${NGINX_LOG_DIR} ]; then
    mkdir -p ${NGINX_LOG_DIR}
fi
if [ ! -f ${ACME_SH} ]; then
    echo "Please install acme.sh before using this tool."
    exit 1
fi
if [ ! -f ${DHPARAM_PEM} ]; then
    openssl dhparam -out ${DHPARAM_PEM} 2048 || exit 1
    chmod 400 ${DHPARAM_PEM}
fi

EXAMPLE_CONF='
server {
    listen 80;
    listen [::]:80;

    server_name SERVERNAME;

    location / {

        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name SERVERNAME;

    access_log  NGINX_LOG_DIR/SERVERNAME.access.log main;
    error_log  NGINX_LOG_DIR/SERVERNAME.error.log error;

    ##ssl on;
    ##ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ##ssl_protocols TLSv1.2;
    ##ssl_ecdh_curve secp384r1;
    ##ssl_session_cache shared:SSL:10m;
    ##ssl_session_timeout  24h;
    ##ssl_buffer_size 1400;
    ##ssl_session_tickets off;
    ##ssl_prefer_server_ciphers on;

    # certificate and dhparam
    ##ssl_certificate NGINX_SSL_DIR/SERVERNAME.chained.crt;
    ##ssl_certificate_key NGINX_SSL_DIR/SERVERNAME.key;
    ##ssl_dhparam NGINX_SSL_DIR/dhparam.pem;

    # OCSP Stapling
    ##ssl_stapling on;
    ##ssl_stapling_verify on;
    ##resolver 8.8.4.4 8.8.8.8 valid=300s;
    ##resolver_timeout 5s;

    # SPDY
    ##http2_idle_timeout 300;

    # Enable HSTS
    ##add_header Strict-Transport-Security max-age=63072000;

    # Do not allow this site to be displayed in iframes
    ##add_header X-Frame-Options DENY;

    # Do not permit Content-Type sniffing.
    ##add_header X-Content-Type-Options nosniff;

    location / {
        limit_except GET POST {
            deny all;
        }

        proxy_pass http://ADDRESS;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}'

function help {
    case $1 in
        "add")
            echo "Usage: "
            echo "proxy_ctl add <domain> <ipaddr:port>"
            ;;
        "del")
            echo "Usage: "
            echo "proxy_ctl del <domain>"
            ;;
        *)
            echo "Usage: "
            echo "proxy_ctl list"
            echo "proxy_ctl add <domain> <ipaddr:port>"
            echo "proxy_ctl del <domain>"
            echo " "
            echo "Example: "
            echo "proxy_ctl list"
            echo "proxy_ctl add example.com server.example.com"
            echo "proxy_ctl add example.com server.example.com:8080"
            echo "proxy_ctl add example.com 10.0.2.15"
            echo "proxy_ctl del example.com"
            ;;
    esac
    exit 1
}

function valid_domain {
    domain=$1
    ret=`echo ${domain} | \
        awk '/^(([a-zA-Z0-9](-?[a-zA-Z0-9])*)\.)+[a-zA-Z]{2,63}$/'`
    if [ "${domain}" == "${ret}" ]; then
        echo 1
    else
        echo 0
    fi
}

function valid_ip {
    ipaddr=$1
    ret=`echo ${ipaddr} | \
        awk -F'.' '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/ && \
        $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255 '`
    if [ "${ipaddr}" == "${ret}" ]; then
        echo 1
    else
        echo 0
    fi
}

function valid_port {
    port=$1
    ret=`echo ${port} | \
        awk '$0 ~ /^([0-9]{1,5})$/ && $0 >= 1 && $0 <= 65535'`
    if [ "${port}" == "${ret}" ]; then
        echo 1
    elif [ "${port}" == "" ]; then
        echo 1
    else
        echo 0
    fi
}

function valid_address {
    address=$1
    addr=`echo ${address} | awk -F':' '{ print $1 }'`
    port=`echo ${address} | awk -F':' '{ print $2 }'`
    if [ "`valid_ip ${addr}`" == "1" ] && \
        [ "`valid_port ${port}`" == "1" ]; then
        echo 1
    elif [ "`valid_domain ${addr}`" == "1" ] && \
        [ "`valid_port ${port}`" == "1" ]; then
        echo 1
    else
        echo 0
    fi
}

function error_ssl {
    domain=$1
    rm -f ${NGINX_CONF_DIR}/${domain}.conf
    rm -f ${NGINX_SSL_DIR}/${domain}.*
    rm -rf 
    echo "Error Found! Procedure Terminated."
    exit 1
}

function install_ssl {
    domain=$1
    ${ACME_SH} --issue -d ${domain} --nginx
    [ "$?" == "1" ] && error_ssl ${domain}
    ${ACME_SH} --install-cert -d ${domain} \
    --key-file       ${NGINX_SSL_DIR}/${domain}.key  \
    --fullchain-file ${NGINX_SSL_DIR}/${domain}.chained.crt \
    --reloadcmd     "${NGINX_RELOAD}" || error_ssl ${domain}
    chmod 400 ${NGINX_SSL_DIR}/${domain}.key
    chmod 400 ${NGINX_SSL_DIR}/${domain}.chained.crt
}

function add_domain {
    domain=$1
    address=$2
    if [ -f "${NGINX_CONF_DIR}/${domain}.conf" ]; then
        echo "The file ${NGINX_CONF_DIR}/${domain}.conf exists."
        exit 0
    else
        myip=`curl -s https://api.ipify.org`
        domain_ip_v4=`
            getent ahostsv4 ${domain} | \
                awk '{ print $1 }' | uniq | head -n 1
        `
        domain_ip_v6=`
            getent ahostsv6 ${domain} | \
                awk '{ print $1 }' | uniq | head -n 1
        `
        if [ "${myip}" != "${domain_ip_v4}" ] &&
            [ "${myip}" != "${domain_ip_v6}" ]; then
            echo "Please resolve your domain to ${myip}."
            echo "Now: "
            echo "    ipv4: ${domain_ip_v4}"
            echo "    ipv6: ${domain_ip_v6}"
            exit 1
        fi

        echo "${EXAMPLE_CONF}" > ${NGINX_CONF_DIR}/${domain}.conf
        sed -i 's/SERVERNAME/'${domain}'/g' \
            ${NGINX_CONF_DIR}/${domain}.conf
        sed -i 's/ADDRESS/'${address}'/g' \
            ${NGINX_CONF_DIR}/${domain}.conf
        sed -i 's|NGINX_SSL_DIR|'${NGINX_SSL_DIR}'|g' \
            ${NGINX_CONF_DIR}/${domain}.conf
        sed -i 's|NGINX_LOG_DIR|'${NGINX_LOG_DIR}'|g' \
            ${NGINX_CONF_DIR}/${domain}.conf
        NGINX_RELOAD &>/dev/null
        install_ssl ${domain}
        sed -i 's/##//g' ${NGINX_CONF_DIR}/${domain}.conf
        NGINX_RELOAD &>/dev/null
        echo "${domain} is ready now."
    fi
}

function uninstall_ssl {
    domain=$1
    ${ACME_SH} --remove -d ${domain}
    rm -rf ${ACME_SH_DIR}/${domain}
}

function del_domain {
    domain=$1
    if [ -f "${NGINX_CONF_DIR}/${domain}.conf"  ]; then
        uninstall_ssl ${domain}
        rm -f ${NGINX_CONF_DIR}/${domain}.conf
        rm -f ${NGINX_SSL_DIR}/${domain}.*
        NGINX_RELOAD &>/dev/null
        echo "${domain} is deleted."
    else
        echo "The file ${NGINX_CONF_DIR}/${domain}.conf does not exist."
    fi
}

function file_exists_wildcard {
  ls $1 > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    echo 1
  else
      echo 0
  fi
}

function list {
    echo "domain   proxy_address"
    echo "------   -------------"
    if [ `file_exists_wildcard ${NGINX_CONF_DIR}/*.conf` == "1" ]; then
        for f in ${NGINX_CONF_DIR}/*.conf
        do
            proxy_address=`
                grep proxy_pass $f | \
                    awk '{
                        i=1
                        while(i<=NR){
                            if($i=="proxy_pass") break;
                            i++;
                        }
                        i++;
                        print substr($i, 0, length($i)-1)
                    }'
            `
            if [ "${proxy_address}" != "" ]; then
                domain=`
                    echo $f | \
                    awk -F'/' '{print substr($NF, 0, length($NF)-5)}'
                `
                echo ${domain} ${proxy_address}
            fi
        done
    fi
}

case $1 in
    "list")
        list
        ;;
    "add")
        if [ $# -ne 3 ] || [ "`valid_domain $2`" == "0" ] || \
            [ "`valid_address $3`" == "0" ]; then
            help "add"
        fi
        add_domain $2 $3
        ;;
    "del")
        if [ $# -ne 2 ] || [ "`valid_domain $2`" == "0" ]; then
            help "del"
        fi
        del_domain $2
        ;;
    *)
        help
        ;;
esac
